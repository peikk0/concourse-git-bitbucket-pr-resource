#!/usr/bin/env bash
# vim: set ft=sh

set -euo pipefail

exec 3>&1
exec 1>&2

payload=$(mktemp /tmp/resource.XXXXXX)
cat > "${payload}" <&0

# source
bitbucket_type=$(jq -r '.source.bitbucket_type // "server"' < ${payload})
base_url=$(jq -r '.source.base_url // ""' < ${payload})
username=$(jq -r '.source.username // ""' < ${payload})
password=$(jq -r '.source.password // ""' < ${payload})
project=$(jq -r '.source.project // ""' < ${payload})
repository=$(jq -r '.source.repository // ""' < ${payload})
limit=$(jq -r '.source.limit // 100' < ${payload})
source_branch=$(jq -r '.source.branch // ""' < ${payload})
# version
version_updated_at=$(jq -r '.version.updated_at // 0' < ${payload})
version_commit=$(jq -r '.version.commit // ""' < ${payload})

if [[ -z "${base_url}" ]]; then
    echo "error: source.base_url can't be empty"
    exit 1
fi
if [[ -z "${project}" ]]; then
    echo "error: source.project can't be empty"
    exit 1
fi
if [[ -z "${repository}" ]]; then
    echo "error: source.repository can't be empty"
    exit 1
fi


# Bitbucket Cloud and (self-hosted) Server APIs are a bit different
if [[ "$bitbucket_type" == "server" ]]; then
    if [[ -n "${source_branch}" ]]; then
        branch_param="&at=refs/heads/${source_branch}"
    else
        branch_param=""
    fi
    uri="${base_url}/rest/api/1.0/projects/${project}/repos/${repository}/pull-requests?limit=${limit}&state=open${branch_param}"

    curl -sS --fail -u ${username}:${password} $uri \
        | jq -r --arg version_updated_at "${version_updated_at}" --arg version_commit $version_commit \
        '.values
        | map({
            id: .id | tostring,
            title: .title | tostring,
            branch: .fromRef.id | tostring | (capture("refs/heads/(?<branch>.+)").branch // .),
            commit: .fromRef.latestCommit,
            updated_at: .updatedDate | tostring
        })
        | map(select(if .title | test("wip"; "i") then false else true end))
        | map(select(.commit != $version_commit))
        | map(select(.updated_at >= $version_updated_at))
        | sort_by(.updated_at)' >&3
elif [[ "$bitbucket_type" == "cloud" ]]; then
    uri="${base_url}/api/2.0/repositories/${project}/${repository}/pullrequests?limit=${limit}&state=OPEN"

    # write response to file as feeding it to jq from a variable doesnt work properly: JSON looses linefeed format in variable
    response=$(mktemp /tmp/resource.XXXXXX)
    curl -sS --fail -u "${username}:${password}" $uri | jq -r '.values' > "${response}"

    prs="[]"
    while read -r pullrequest; do
        branch=$(echo "$pullrequest" | jq -r '.source.branch.name')
        if [[ "${source_branch}" ]]; then
            [[ "${branch}" == "${source_branch}" ]] || continue
        fi
        id=$(echo "$pullrequest" | jq -r '.id')
        title=$(echo "$pullrequest" | jq -r '.title')
        commit=$(echo "$pullrequest" | jq -r '.source.commit.hash')
        commit_url=$(echo "$pullrequest" | jq -r '.source.commit.links.self.href')

        # get the commit date, which is when the PR last got updated code-wise.
        # the updated_on field in the PR also changes when comment added etc
        date=$(curl -s --fail -u "${username}:${password}" $commit_url | jq -r '.date')

        pr=$(jq -n --arg id "${id}" --arg title "${title}" --arg branch "${branch}" --arg commit "${commit}" --arg date "${date}" '[{id: $id, title: $title, branch: $branch, commit: $commit, updated_at: $date}]')
        prs=$(jq -n --argjson prs "${prs}" --argjson pr "${pr}"  '$prs + $pr')
    done < <(jq -c '.[]' "${response}")

    if [[ $(echo "${prs}" | jq length) -eq 0 ]]; then
        jq -n "$prs" >&3
        exit
    fi

    # take the list of PRs | filter out containing "wip" in title | sort by update-date of commits | remove the date | pick latest PR, wrap as array for concourse
    jq -n --argjson prs "${prs}" '[ $prs
        | map(select(if .title | test("wip"; "i") then false else true end))
        | sort_by(.updated_at)
        | map(del(.updated_at))
        | .[-1] ]' >&3
fi
